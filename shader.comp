#version 430

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;
//layout(rgba32f, binding = 1) uniform image2D img_input;

uniform samplerBuffer bufferTexture;

struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct Camera
{
	int screenHeight;
	int screenWidth;
	float viewportHeight;
	float viewportWidth;
	float focalLength;
	vec3 position;
	vec3 viewportU;
	vec3 viewportV;
	vec3 pixelDeltaU;
	vec3 pixelDeltaV;
	vec3 viewportUpperLeft;
	vec3 pixel00Position;
};

struct Camera getCamera(int screenWidth, int screenHeight, float viewportHeight, float focalLength, vec3 startingPos = vec3(0, 0, 0))
{
	struct Camera camera;

	camera.screenHeight = screenHeight;
	camera.screenWidth = screenWidth;
	camera.viewportHeight = viewportHeight;
	camera.viewportWidth = viewportHeight * (float(screenWidth) / float(screenHeight));
	camera.focalLength = focalLength;
	camera.position = startingPos;
	camera.viewportU = vec3(camera.viewportWidth, 0, 0);
	camera.viewportV = vec3(0, -viewportHeight, 0);
	camera.pixelDeltaU = vec3(camera.viewportWidth / screenWidth, 0, 0);
	camera.pixelDeltaV = vec3(0, -viewportHeight / screenHeight, 0);
	camera.viewportUpperLeft = camera.position
		+ vec3(0, 0, focalLength)
		- camera.viewportU / 2
		- camera.viewportV / 2;
	camera.pixel00Position = camera.viewportUpperLeft + 0.5 * (camera.pixelDeltaU + camera.pixelDeltaV);

	return camera;
}

struct Ray getStartingRay(int pixelX, int pixelY, vec3 cameraPosition, vec3 pixel00Position, vec3 pixelDeltaU, vec3 pixelDeltaV)
{
	// Draw a ray through the center of the pixel from the camera and then march along it
	vec3 pixelSample = pixel00Position
		+ (pixelX * pixelDeltaU)
		+ (pixelY * pixelDeltaV);

	struct Ray ray;
	ray.origin = pixelSample;                       // Starting position is at the pixel
	ray.direction = pixelSample - cameraPosition;	// Starting direction is through pixel sample from origin

	return ray;
}

void main()
{
	uint VOXEL_SIZE = 1;

	uint CHUNK_SIZE = 40;

	uint CHUNK_SIZE_SQUARED = 1600;

	vec3 MIN_VOXEL_POSITION = texelFetch(bufferTexture, 0).rgb;

	uint MAX_VOXEL_INDEX = CHUNK_SIZE - 1;

	vec3 VOXEL_OFFSET = MIN_VOXEL_POSITION * VOXEL_SIZE;

	ivec2 dims = imageSize(img_output);

	struct Camera camera = getCamera(dims.x, dims.y, 20.0f, 1.0f, vec3(0, 0, 0));

	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	int pixel_x = pos.x;
	int pixel_y = pos.y;

	// Get the ray that we will march, starting at the center of the pixel in the direction from the camera to the pixel
	struct Ray ray = getStartingRay(pixel_x, pixel_y, camera.position, camera.pixel00Position,
		camera.pixelDeltaU, camera.pixelDeltaV);

	// Next position to check
	vec3 checkPos = ray.origin;

	bool entered = false;
	float t_max = 100.0f;
	float t = 0.0f;

	while (t <= t_max)
	{
		// If the direction is positive, then go to the voxel greater, otherwise go to the voxel less
		vec3 step = mix(ceil(checkPos) - VOXEL_SIZE, 
				floor(checkPos) + VOXEL_SIZE, 
				greaterThanEqual(ray.direction, vec3(0.0)));
		vec3 tMove = (step - checkPos) / ray.direction;

		// Checking phase
		vec3 tMin = min(min(tMove, tMove.yzx), tMove.zxy);
		t += tMin.x;
		checkPos = ray.origin + ray.direction * t;
		tMove = mix(tMin, vec3(0.0f), greaterThan(tMove, tMin));

		// Calculate the voxel grid coordinates using floor
		vec3 nextVoxelPosition = floor(checkPos + 0.0001f);

		// Predicate vectors for tMove > 0 and dirSigns <= 0
		vec3 tMoveGtZero = vec3(greaterThan(tMove, vec3(0.0)));
		vec3 dirSignsLtEqZero = vec3(lessThanEqual(ray.direction, vec3(0.0)));

		// Compute the offset using vectorized logic
		vec3 offset = tMoveGtZero * dirSignsLtEqZero;
    
		// Add the offset to the nextVoxelIndex
		nextVoxelPosition = nextVoxelPosition - offset;

		// Convert to index within the chunk using convertPositionToVoxelIndex
		vec3 voxelIndexToCheck = vec3(
			round((nextVoxelPosition.x - VOXEL_OFFSET.x)),
			round((nextVoxelPosition.y - VOXEL_OFFSET.y)),
			round((nextVoxelPosition.z - VOXEL_OFFSET.z))
		);

		// Check if point is within chunk (voxel index should be valid)
		if (all(greaterThanEqual(voxelIndexToCheck, vec3(0)) && lessThan(voxelIndexToCheck, vec3(MAX_VOXEL_INDEX))))
		{
			entered = true;
			// If there is a voxel at that point (alpha is not zero), then the ray hits
			int bufferIndex = int(voxelIndexToCheck.x + voxelIndexToCheck.y * CHUNK_SIZE + voxelIndexToCheck.z * CHUNK_SIZE_SQUARED) + 1;
			vec4 pixel = texelFetch(bufferTexture, bufferIndex);

			if (pixel.a >= 0.001f)
			{
				// Draw the pixel
				imageStore(img_output, ivec2(pixel_x, pixel_y), pixel);
				return;
			}
		}

		// If the chunk has been entered and then exited, break the while loop
		else if (entered)
		{
			imageStore(img_output, ivec2(pixel_x, pixel_y), vec4(0.0f));
			return;
		}
	}

	// Chunk not entered and no voxel hit
	imageStore(img_output, ivec2(pixel_x, pixel_y), vec4(0.0f));
	return;
}

